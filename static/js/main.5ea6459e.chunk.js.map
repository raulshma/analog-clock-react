{"version":3,"sources":["components/Hand.jsx","components/Num.jsx","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["Hand","classN","ratio","className","style","Num","num","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","App","useState","hourHand","setHourHand","minuteHand","setMinuteHand","secondHand","setSecondHand","setTime","nowDate","Date","secondsRatio","getSeconds","minutesRatio","getMinutes","hoursRatio","getHours","Array","keys","map","e","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAMeA,MAJf,YAAkC,IAAlBC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MACtB,OAAO,yBAAKC,UAAWF,EAAQG,MAAO,CAAE,WAAYF,MCGvCG,MAJf,YAA+B,IAAhBJ,EAAe,EAAfA,OAAQK,EAAO,EAAPA,IACrB,OAAO,yBAAKH,UAAWF,GAASK,ICmBnBC,EApBK,SAACC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,K,MCmBSQ,MAhCf,WAAgB,IAAD,EACmBC,mBAAS,MAD5B,mBACNC,EADM,KACIC,EADJ,OAEuBF,mBAAS,MAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGuBJ,mBAAS,MAHhC,mBAGNK,EAHM,KAGMC,EAHN,KAIPC,EAAU,WACd,IAAMC,EAAU,IAAIC,KACdC,EAAeF,EAAQG,aAAe,GACtCC,GAAgBF,EAAeF,EAAQK,cAAgB,GACvDC,GAAcF,EAAeJ,EAAQO,YAAc,GACzDT,EAA6B,IAAfI,GACdN,EAA6B,IAAfQ,GACdV,EAAyB,IAAbY,IASd,OAPAzB,GAAY,WACVkB,MACC,KAEHb,qBAAU,WACRa,MACC,IAED,yBAAKtB,UAAU,SACb,kBAAC,EAAD,CAAMF,OAAO,YAAYC,MAAOiB,IAChC,kBAAC,EAAD,CAAMlB,OAAO,cAAcC,MAAOmB,IAClC,kBAAC,EAAD,CAAMpB,OAAO,cAAcC,MAAOqB,IACjC,YAAIW,MAAM,IAAIC,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OACzB,kBAAC,EAAD,CAAKC,IAAKD,EAAGhC,IAAKgC,EAAI,EAAGrC,OAAM,mBAAcqC,EAAI,UCpBrCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5ea6459e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Hand({ classN, ratio }) {\n  return <div className={classN} style={{ '--rotate': ratio }}></div>;\n}\n\nexport default Hand;\n","import React from 'react';\n\nfunction Num({ classN, num }) {\n  return <div className={classN}>{num}</div>;\n}\n\nexport default Num;\n","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;","import React, { useEffect, useState } from 'react';\nimport Hand from './components/Hand';\nimport Num from './components/Num';\nimport useInterval from './hooks/useInterval';\nimport './App.css';\n\nfunction App() {\n  const [hourHand, setHourHand] = useState(null);\n  const [minuteHand, setMinuteHand] = useState(null);\n  const [secondHand, setSecondHand] = useState(null);\n  const setTime = () => {\n    const nowDate = new Date();\n    const secondsRatio = nowDate.getSeconds() / 60;\n    const minutesRatio = (secondsRatio + nowDate.getMinutes()) / 60;\n    const hoursRatio = (minutesRatio + nowDate.getHours()) / 12;\n    setSecondHand(secondsRatio * 360);\n    setMinuteHand(minutesRatio * 360);\n    setHourHand(hoursRatio * 360);\n  };\n  useInterval(() => {\n    setTime();\n  }, 1000);\n\n  useEffect(() => {\n    setTime();\n  }, []);\n  return (\n    <div className=\"clock\">\n      <Hand classN=\"hand hour\" ratio={hourHand} />\n      <Hand classN=\"hand minute\" ratio={minuteHand} />\n      <Hand classN=\"hand second\" ratio={secondHand} />\n      {[...Array(12).keys()].map((e, i) => (\n        <Num key={i} num={i + 1} classN={`num num__${i + 1}`} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}